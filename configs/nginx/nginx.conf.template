# CREDITS:
# https://github.com/antonputra/tutorials/pull/325/files
# https://github.com/antonputra/tutorials/pull/334/files
worker_processes auto;
worker_cpu_affinity auto;
# Change the default thread pool settings
thread_pool default threads=2 max_queue=16384;
error_log /var/log/nginx/error.log notice;

events {
	worker_connections 16384;

	# Serve many clients each thread (Linux only)
	use epoll;

	# Accept as many connections as possible
	multi_accept on;
}

http {
	# Set the default charset to UTF-8
	charset UTF-8;

	# Copies data between one FD and other from within the kernel
	# faster than read() + write()
	sendfile on;

	# Use the default thread pool for asynchronous file I/O
	aio threads;

	# Only use AIO is used for when larger than or equal to this size
	directio 6m;

	# Send headers in one piece, it is better than sending them one by one
	tcp_nopush on;

	# Don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

	# Disable logging if a file can't be found
	log_not_found off;

	# Server will close connection after this time
	# keepalive_timeout 65;
	keepalive_requests 100;

	# Timeout settings - Important for preventing slow clients from holding resources
	# send_timeout 60s; # Time to send data to the client
	# client_header_timeout 60s; # Time to read client request headers

	# Max size of types hash tables (processing static sets of data. eg. server names, map directives or mime types)
	types_hash_max_size 2048;

	# Max allowed size of the client request body
	# client_max_body_size 250M;
	# client_max_body_size 10m;

	# If the request body size is more than the buffer size, then the entire (or partial)
	# request body is written into a temporary file
	# client_body_buffer_size 512k;
	# Time to read client request body
	# client_body_timeout 300s;
	# client_body_timeout 60s;
	# control buffer overflow attacks
	client_body_buffer_size 16k; # default: 8k (32-bit) | 16k (64-bit)
	client_header_buffer_size 1k; # default: 1k
	client_max_body_size 100k; # default: 1m
	large_client_header_buffers 2 1k; # default: 4 8k

	# Mitigating Slow HTTP DoS attacks
	client_body_timeout 10s; # default: 60s
	client_header_timeout 10s; # default: 60s
	keepalive_timeout 5s 5s; # default: 75s
	send_timeout 10s; # default: 60s

	# Allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	'$status $body_bytes_sent "$http_referer" '
	'"$http_user_agent" "$http_x_forwarded_for"';

	access_log /var/log/nginx/access.log main;

	# Gzip compression
	gzip on;
	gzip_disable msie6;
	gzip_comp_level 6;
	gzip_http_version 1.1;
	gzip_vary on;
	gzip_min_length 256;
	gzip_buffers 16 8k;
	gzip_proxied any;
	gzip_types text/css text/plain text/javascript text/cache-manifest text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy application/javascript application/json application/x-javascript application/ld+json application/xml application/xml+rss application/xhtml+xml application x-font-ttf application/x-font-opentype application/vnd.ms-fontobject application/manifest+json application/rss+xml application/atom_xml application/vnd.geo+json application/x-web-app-manifest+json image/svg+xml image/x-icon image/bmp font/opentype;

	server_tokens off;

	# If the "Upgrade" header is present and non-empty, forward "Connection: Upgrade".
	# Otherwise, do not forward the "Connection" header.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		"" "";
	}

	# Define upstream service
	upstream backend {
		server app:$SERVER_PORT;
		# Maintain 64 idle keep-alive connections to upstream servers from each worker process
		keepalive 64;
	}

	server {
		listen 80;
		listen [::]:80;

		root /usr/share/nginx/html;

		error_page 404 /404.html;

		# Serve index.html at the root path
		location = / {
			include /etc/nginx/conf.d/security.conf;
			try_files /index.html =404;
		}

		# images, icons, video, audio, HTC, CSS and Javascript
		location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|css|js|map)$ {
			include /etc/nginx/conf.d/security.conf;

			expires 1d;
			access_log off;
			add_header Cache-Control "public";

			# Optional: Enable server-side caching for static files (proxy_cache)
			open_file_cache max=1000 inactive=30s;
			open_file_cache_valid 60s;
			open_file_cache_min_uses 2;
			open_file_cache_errors on;
		}

		# IMPORTANT: Location for error pages - MUST be BEFORE the proxy location
		location ~ ^/(404\.html|50x\.html)$ {
			include /etc/nginx/conf.d/security.conf;
			internal; # Important for security. Prevents direct access
		}

		# Handle JSON requests separately
		location /api {
			include /etc/nginx/conf.d/proxy.conf;
			proxy_intercept_errors on;
			error_page 404 = @json_error;
		}

		location @json_error {
			default_type application/json;
			add_header Content-Type application/json;
			return 404
		}

		# Proxy requests to the Go app
		location / {
			include /etc/nginx/conf.d/proxy.conf;
			include /etc/nginx/conf.d/security.conf;

			proxy_intercept_errors on;
			error_page 404 /404.html;
			error_page 500 502 503 504 /50x.html;
		}

		location ~ /.well-known {
			allow all;
		}
	}
}
