name: gfb-base

services:
  # Go Web App Service
  app:
    build:
      context: ../../
      dockerfile: build/docker/Dockerfile
    container_name: gfb-app
    volumes:
      - gfb_mod_cache:/go/pkg/mod
      - gfb_build_cache:/root/.cache/go-build
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://app:${SERVER_PORT}/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      migrate:
        condition: service_completed_successfully

  # PostgreSQL Database Service
  db:
    image: postgres:17.0-alpine3.20
    container_name: gfb-db
    shm_size: 128mb
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [CMD-SHELL, "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ../../configs/postgresql.conf:/etc/postgresql/postgresql.conf:Z
      - ../../configs/psqlrc:/root/.psqlrc:Z
    restart: always
    ports:
      - 5432:5432

  # Nginx Reverse Proxy Service
  proxy:
    image: nginx:1.27.2-alpine3.20
    container_name: gfb-proxy
    environment:
      - SERVER_PORT=${SERVER_PORT}
    volumes:
      - ../../configs/nginx:/etc/nginx/conf.d:Z
    depends_on:
      app:
        condition: service_healthy
    command: ["./start-nginx.sh"]
    ports:
      - "8080:80"
    restart: always

  migrate:
    image: migrate/migrate:v4.17.1
    container_name: gfb-migrate
    volumes:
      - ../../db/migrations:/migrations:Z
    depends_on:
      db:
        condition: service_healthy
    command:
      [
        "-path",
        "/migrations/",
        "-database",
        "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}",
        "up",
      ]

volumes:
  gfb_mod_cache:
  gfb_build_cache:
